const [clientes, setClientes] = useState([
    {
      id: 1,
      nome: "João Silva",
      telefone: "11999999999",
      indicadoPor: "Maria Souza",
      endereco: "Rua A, 123 - Centro",
      totalEmprestimos: 5,
      pendentes: 2,
      totalEmprestado: 10000,
      lucroTotal: 1500,
      maiorValorEmprestado: 3000,
      ultimoEmprestimo: {
        valor: 2000,
        data: "10/04/2024",
      },
      emprestimosPagos: 3,
    },
    {
      id: 2,
      nome: "Ana Oliveira",
      telefone: "11988888888",
      indicadoPor: "Carlos Lima",
      endereco: "Av. B, 456 - Bairro Novo",
      totalEmprestimos: 3,
      pendentes: 1,
      totalEmprestado: 6000,
      lucroTotal: 900,
      maiorValorEmprestado: 2500,
      ultimoEmprestimo: {
        valor: 2500,
        data: "05/03/2024",
      },
      emprestimosPagos: 2,
    },
    {
      id: 3,
      nome: "Pedro Santos",
      telefone: "11977777777",
      indicadoPor: "Joana Lima",
      endereco: "Rua C, 789 - Jardim das Flores",
      totalEmprestimos: 4,
      pendentes: 1,
      totalEmprestado: 8000,
      lucroTotal: 1200,
      maiorValorEmprestado: 2800,
      ultimoEmprestimo: {
        valor: 1800,
        data: "15/02/2024",
      },
      emprestimosPagos: 3,
    },
  ]);

import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

  const [modalEditar, setModalEditar] = useState(false);
  const [modalObs, setModalObs] = useState(false);
  const [observacao, setObservacao] = useState("");
  const [editCliente, setEditCliente] = useState({
    nome: "",
    telefone: "",
    endereco: "",
    indicado: "",
  });

const abrirModalEditar = () => {
    setEditCliente({
      nome: clienteSelecionado.nome,
      telefone: clienteSelecionado.telefone,
      endereco: clienteSelecionado.endereco,
      indicado: clienteSelecionado.indicado,
    });
    setModalEditar(true);
  };
  const salvarEdicao = async () => {
    console.log("Salvar edição no backend aqui", editCliente);
    setModalEditar(false);
    fecharModal();
  };

  const apagarCliente = async () => {
    if (window.confirm("Tem certeza que deseja apagar este cliente?")) {
      console.log("Apagar no backend aqui", clienteSelecionado.id);
      fecharModal();
    }
  };

const abrirModalObs = () => {
    setModalObs(true);
  };
  const salvarObs = () => {
    console.log("Salvar observação só local, não vai no relatório:", observacao);
    setModalObs(false);
  };

  const gerarRelatorio = () => {
    if (!clienteSelecionado) return;

    const doc = new jsPDF();
    doc.setFontSize(18);
    doc.text(`Relatório do Cliente - ${clienteSelecionado.nome}`, 14, 20);

    doc.setFontSize(12);
    doc.text("Dados Pessoais", 14, 30);
    autoTable(doc, {
      startY: 35,
      head: [["Campo", "Valor"]],
      body: [
        ["Nome", clienteSelecionado.nome],
        ["Telefone", clienteSelecionado.telefone || "-"],
        ["Endereço", clienteSelecionado.endereco || "-"],
        ["Indicado por", clienteSelecionado.indicado || "-"],
      ],
    });

    const posY = doc.lastAutoTable.finalY + 10;
    doc.text("Empréstimos", 14, posY);
    autoTable(doc, {
      startY: posY + 5,
      head: [["Campo", "Valor"]],
      body: [
        ["Total de Empréstimos", clienteSelecionado.total_emprestimos_feitos],
        ["Pendentes", clienteSelecionado.emprestimos_pendentes],
        ["Atrasados", clienteSelecionado.emprestimos_atrasados],
        ["Quitados", clienteSelecionado.emprestimos_pagos],
        ["Total Emprestado", formatarValor(clienteSelecionado.total_valor_emprestado)],
        ["Lucro Total", formatarValor(clienteSelecionado.lucro_total)],
        ["Maior Valor Emprestado", formatarValor(clienteSelecionado.maior_valor_emprestado)],
        ["Atrasos", clienteSelecionado.atrasos],
      ],
    });

    doc.save(`relatorio_${clienteSelecionado.nome}.pdf`);
  };



  {modalEditar && (
        <div className={styles.modalOverlay} onClick={() => setModalEditar(false)}>
          <div className={styles.modalContent} onClick={(e) => e.stopPropagation()}>
            <button className={styles.modalClose} onClick={() => setModalEditar(false)}>&times;</button>
            <h2 className={styles.modalTitle}>Editar Cliente</h2>
            <div className={styles.modalBody}>
              <input type="text" value={editCliente.nome} onChange={(e) => setEditCliente({ ...editCliente, nome: e.target.value })} />
              <input type="text" value={editCliente.telefone} onChange={(e) => setEditCliente({ ...editCliente, telefone: e.target.value })} />
              <input type="text" value={editCliente.endereco} onChange={(e) => setEditCliente({ ...editCliente, endereco: e.target.value })} />
              <input type="text" value={editCliente.indicado} onChange={(e) => setEditCliente({ ...editCliente, indicado: e.target.value })} />
              <button className={styles.botaoSalvar} onClick={salvarEdicao}>Salvar Alterações</button>
            </div>
          </div>
        </div>
      )}

      {modalObs && (
        <div className={styles.modalOverlay} onClick={() => setModalObs(false)}>
          <div className={styles.modalContent} onClick={(e) => e.stopPropagation()}>
            <button className={styles.modalClose} onClick={() => setModalObs(false)}>&times;</button>
            <h2 className={styles.modalTitle}>Observação</h2>
            <textarea
              className={styles.textareaObs}
              value={observacao}
              onChange={(e) => setObservacao(e.target.value)}
              placeholder="Escreva observações sobre este cliente..."
            />
            <button className={styles.botaoSalvar} onClick={salvarObs}>Salvar Observação</button>
          </div>
        </div>
      )}



